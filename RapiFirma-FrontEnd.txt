//Package-json
{
  "name": "rapifirma",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@heroicons/vue": "^2.2.0",
    "@tailwindcss/vite": "^4.1.12",
    "axios": "^1.11.0",
    "pinia": "^3.0.3",
    "vue": "^3.5.18",
    "vue-router": "^4.5.1"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^6.0.1",
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.12",
    "vite": "^7.1.2"
  }
}

//index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/public/firma.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>RapiFirma</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>

//vite.config.js 
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import tailwindcss from '@tailwindcss/vite';
// https://vite.dev/config/
export default defineConfig({
  plugins: [
    vue(),
    tailwindcss(),
  ],
})

//App.vue
<template>
  <div>
    <Header />
    <MainPanel />
  </div>
</template>

<script setup>
import Header from './components/Header.vue';
import MainPanel from './components/MainPanel.vue';
</script>

//main.js
import { createApp } from 'vue'
import './style.css'
import App from './App.vue'
import { createPinia } from 'pinia';

createApp(App).use(createPinia()).mount('#app')

//syle.css
@import "tailwindcss";


//stores/auth.js
import { defineStore } from 'pinia';

export const useAuthStore = defineStore('auth', {
  state: () => ({
    userName: '',
    isAuthenticated: false,
  }),
  actions: {
    login(user) {
      this.userName = user.name;
      this.isAuthenticated = true;
      // Aquí iría la lógica de JWT y redirección
    },
    logout() {
      this.userName = '';
      this.isAuthenticated = false;
      // Redirigir a login con vue-router
    },
  },
});

//stores/main.js
import { defineStore } from 'pinia';

export const useMainStore = defineStore('main', {
  state: () => ({
    users: [
      { id: 1, fullName: 'Juan Pérez', cargo: 'Administrador' },
      { id: 2, fullName: 'María Gómez', cargo: 'Funcionario' },
      { id: 3, fullName: 'Carlos López', cargo: 'Normal' },
    ],
  }),
  actions: {
    addUser(user) {
      this.users.push(user);
    },
    getUsers() {
      return this.users;
    },
  },
});

//components/Header.vue
<template>
  <div class="flex justify-between items-center p-6 bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-lg">
    <div class="text-2xl font-bold tracking-wide transform hover:scale-105 transition duration-300">
      Bienvenido {{ userName }}
    </div>
    <button @click="logout" class="bg-red-700 text-white px-5 py-2 rounded-full hover:bg-red-800 hover:shadow-md transition duration-300">
      Salir de la sesión
    </button>
  </div>
</template>

<script setup>
import { useAuthStore } from '../stores/auth';

const authStore = useAuthStore();
const userName = authStore.userName;

const logout = () => {
  authStore.logout();
  // Agregar redirección a login con vue-router
};
</script>

//components/MainPanel.vue
<template>
  <div class="p-6 bg-gray-50 min-h-screen">
    <h2 class="text-2xl font-bold mb-6 text-indigo-800">Panel de Documentos</h2>
    
    <div class="mb-6">
      <button @click="openUploadModal" class="bg-indigo-600 text-white px-6 py-3 rounded-lg shadow-md hover:bg-indigo-700 transition duration-300 flex items-center">
        <CloudArrowUpIcon class="h-5 w-5 mr-2" />
        Subir y Enviar PDF
      </button>
    </div>
    
    <div class="mb-6 border-b border-gray-300">
      <button @click="activeTab = 'received'" :class="{'bg-indigo-100 text-indigo-800 font-semibold': activeTab === 'received', 'text-gray-600': activeTab !== 'received'}" class="px-6 py-3 rounded-t-lg hover:bg-indigo-50 transition">
        Recibidos
      </button>
      <button @click="activeTab = 'sent'" :class="{'bg-indigo-100 text-indigo-800 font-semibold': activeTab === 'sent', 'text-gray-600': activeTab !== 'sent'}" class="px-6 py-3 rounded-t-lg hover:bg-indigo-50 transition">
        Enviados
      </button>
    </div>
    
    <div v-if="activeTab === 'received'" class="bg-white p-6 rounded-lg shadow-lg">
      <h3 class="text-xl font-semibold mb-4 text-indigo-700">Recibidos</h3>
      <div class="mb-4 grid grid-cols-1 md:grid-cols-3 gap-4">
        <input v-model="searchReceived" placeholder="Buscar por nombre o PDF" class="p-3 border border-gray-300 rounded-lg">
        <select v-model="filterStatus" class="p-3 border border-gray-300 rounded-lg">
          <option value="">Todos</option>
          <option value="pendiente">Pendientes</option>
          <option value="firmado">Firmados</option>
        </select>
        <input v-model="dateFilter" type="date" class="p-3 border border-gray-300 rounded-lg">
      </div>
      <div class="overflow-x-auto">
        <table class="w-full text-sm text-left text-gray-700">
          <thead class="bg-indigo-100 text-indigo-800 uppercase text-xs">
            <tr>
              <th class="px-6 py-3">Nombre PDF</th>
              <th class="px-6 py-3">Enviado Por</th>
              <th class="px-6 py-3">Estado</th>
              <th class="px-6 py-3">Fecha</th>
              <th class="px-6 py-3">Acciones</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="doc in paginatedReceivedDocs" :key="doc.id" class="bg-white border-b hover:bg-gray-50">
              <td class="px-6 py-4">{{ doc.name }}</td>
              <td class="px-6 py-4">{{ doc.sentBy }}</td>
              <td class="px-6 py-4">
                <span :class="{'bg-green-200 text-green-800': doc.status === 'firmado', 'bg-yellow-200 text-yellow-800': doc.status === 'pendiente'}" class="px-3 py-1 rounded-full text-xs font-medium">
                  {{ doc.status }}
                </span>
              </td>
              <td class="px-6 py-4">{{ doc.date }}</td>
              <td class="px-6 py-4 flex space-x-3">
                <span class="relative group">
                  <FolderOpenIcon class="h-5 w-5 text-blue-600 cursor-pointer" @click="openDoc(doc)" />
                  <span class="absolute top-[-30px] left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity">Abrir</span>
                </span>
                <span v-if="doc.status === 'pendiente'" class="relative group">
                  <PencilSquareIcon class="h-5 w-5 text-green-600 cursor-pointer" @click="signDoc(doc)" />
                  <span class="absolute top-[-30px] left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity">Firmar</span>
                </span>
                <span class="relative group">
                  <ArrowPathRoundedSquareIcon class="h-5 w-5 text-yellow-600 cursor-pointer" @click="sendDoc(doc)" />
                  <span class="absolute top-[-30px] left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity">Reenviar</span>
                </span>
                <span v-if="doc.status === 'firmado'" class="relative group">
                  <ArrowDownOnSquareIcon class="h-5 w-5 text-purple-600 cursor-pointer" @click="downloadDoc(doc)" />
                  <span class="absolute top-[-30px] left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity">Descargar</span>
                </span>
                <span class="relative group">
                  <TrashIcon class="h-5 w-5 text-red-600 cursor-pointer" @click="deleteDoc(doc)" />
                  <span class="absolute top-[-30px] left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity">Borrar</span>
                </span>
              </td>
            </tr>
          </tbody>
        </table>
        <div class="mt-4 flex justify-between items-center">
          <button @click="currentPageReceived--" :disabled="currentPageReceived === 1" class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:bg-gray-400">
            Anterior
          </button>
          <span>Página {{ currentPageReceived }} de {{ totalPagesReceived }}</span>
          <button @click="currentPageReceived++" :disabled="currentPageReceived === totalPagesReceived" class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:bg-gray-400">
            Siguiente
          </button>
        </div>
      </div>
    </div>
    
    <div v-if="activeTab === 'sent'" class="bg-white p-6 rounded-lg shadow-lg">
      <h3 class="text-xl font-semibold mb-4 text-indigo-700">Enviados</h3>
      <div class="mb-4 grid grid-cols-1 md:grid-cols-3 gap-4">
        <input v-model="searchSent" placeholder="Buscar por nombre o PDF" class="p-3 border border-gray-300 rounded-lg">
        <select v-model="filterStatusSent" class="p-3 border border-gray-300 rounded-lg">
          <option value="">Todos</option>
          <option value="pendiente">Pendientes</option>
          <option value="firmado">Firmados</option>
        </select>
        <input v-model="dateFilterSent" type="date" class="p-3 border border-gray-300 rounded-lg">
      </div>
      <div class="overflow-x-auto">
        <table class="w-full text-sm text-left text-gray-700">
          <thead class="bg-indigo-100 text-indigo-800 uppercase text-xs">
            <tr>
              <th class="px-6 py-3">Nombre PDF</th>
              <th class="px-6 py-3">Enviado A</th>
              <th class="px-6 py-3">Estado</th>
              <th class="px-6 py-3">Fecha</th>
              <th class="px-6 py-3">Acciones</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="doc in paginatedSentDocs" :key="doc.id" class="bg-white border-b hover:bg-gray-50">
              <td class="px-6 py-4">{{ doc.name }}</td>
              <td class="px-6 py-4">{{ doc.sentTo }}</td>
              <td class="px-6 py-4">
                <span :class="{'bg-green-200 text-green-800': doc.status === 'firmado', 'bg-yellow-200 text-yellow-800': doc.status === 'pendiente'}" class="px-3 py-1 rounded-full text-xs font-medium">
                  {{ doc.status }}
                </span>
              </td>
              <td class="px-6 py-4">{{ doc.date }}</td>
              <td class="px-6 py-4 flex space-x-3">
                <span class="relative group">
                  <FolderOpenIcon class="h-5 w-5 text-blue-600 cursor-pointer" @click="openDoc(doc)" />
                  <span class="absolute top-[-30px] left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity">Abrir</span>
                </span>
                <span class="relative group">
                  <ArrowPathRoundedSquareIcon class="h-5 w-5 text-yellow-600 cursor-pointer" @click="sendDoc(doc)" />
                  <span class="absolute top-[-30px] left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity">Reenviar</span>
                </span>
                <span v-if="doc.status === 'firmado'" class="relative group">
                  <ArrowDownOnSquareIcon class="h-5 w-5 text-purple-600 cursor-pointer" @click="downloadDoc(doc)" />
                  <span class="absolute top-[-30px] left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity">Descargar</span>
                </span>
                <span class="relative group">
                  <TrashIcon class="h-5 w-5 text-red-600 cursor-pointer" @click="deleteDoc(doc)" />
                  <span class="absolute top-[-30px] left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity">Borrar</span>
                </span>
              </td>
            </tr>
          </tbody>
        </table>
        <div class="mt-4 flex justify-between items-center">
          <button @click="currentPageSent--" :disabled="currentPageSent === 1" class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:bg-gray-400">
            Anterior
          </button>
          <span>Página {{ currentPageSent }} de {{ totalPagesSent }}</span>
          <button @click="currentPageSent++" :disabled="currentPageSent === totalPagesSent" class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:bg-gray-400">
            Siguiente
          </button>
        </div>
      </div>
    </div>
    
    <UploadModal v-if="showUploadModal" @close="showUploadModal = false" @upload-success="handleUploadSuccess" />
  </div>
</template>

<script setup>
import { ref, computed } from 'vue';
// --- ICONOS ACTUALIZADOS A SOLID ---
import { 
  FolderOpenIcon, 
  PencilSquareIcon, 
  ArrowPathRoundedSquareIcon, 
  ArrowDownOnSquareIcon, 
  TrashIcon, 
  CloudArrowUpIcon 
} from '@heroicons/vue/24/solid';
import UploadModal from './UploadModal.vue';

const activeTab = ref('received');
const searchReceived = ref('');
const filterStatus = ref('pendiente');
const dateFilter = ref('');
const searchSent = ref('');
const filterStatusSent = ref('');
const dateFilterSent = ref('');
const showUploadModal = ref(false);
const currentPageReceived = ref(1);
const currentPageSent = ref(1);
const itemsPerPage = 10;

// Datos mockeados para documentosrr
const receivedDocs = ref([
  { id: 1, name: 'Contrato 2025', sentBy: 'Juan Pérez', status: 'pendiente', date: '2025-08-10' },
  { id: 2, name: 'Informe Anual', sentBy: 'María Gómez', status: 'firmado', date: '2025-08-12' },
  { id: 3, name: 'Solicitud 2025', sentBy: 'Carlos López', status: 'pendiente', date: '2025-08-11' },
  { id: 4, name: 'Reporte Mensual', sentBy: 'Ana Ruiz', status: 'firmado', date: '2025-08-13' },
  { id: 5, name: 'Plan Anual', sentBy: 'Juan Pérez', status: 'pendiente', date: '2025-08-14' },
  { id: 6, name: 'Evaluación', sentBy: 'María Gómez', status: 'firmado', date: '2025-08-15' },
  { id: 7, name: 'Presupuesto', sentBy: 'Carlos López', status: 'pendiente', date: '2025-08-16' },
  { id: 8, name: 'Memorandum', sentBy: 'Ana Ruiz', status: 'firmado', date: '2025-08-17' },
  { id: 9, name: 'Informe Final', sentBy: 'Juan Pérez', status: 'pendiente', date: '2025-08-18' },
  { id: 10, name: 'Propuesta', sentBy: 'María Gómez', status: 'firmado', date: '2025-08-19' },
  { id: 11, name: 'Documento Extra', sentBy: 'Carlos López', status: 'pendiente', date: '2025-08-20' },
]);
const sentDocs = ref([
  { id: 1, name: 'Solicitud', sentTo: 'Carlos López', status: 'pendiente', date: '2025-08-11' },
  { id: 2, name: 'Reporte', sentTo: 'Ana Ruiz', status: 'firmado', date: '2025-08-13' },
  { id: 3, name: 'Contrato', sentTo: 'Juan Pérez', status: 'pendiente', date: '2025-08-12' },
  { id: 4, name: 'Informe', sentTo: 'María Gómez', status: 'firmado', date: '2025-08-14' },
  { id: 5, name: 'Plan', sentTo: 'Carlos López', status: 'pendiente', date: '2025-08-15' },
  { id: 6, name: 'Evaluación', sentTo: 'Ana Ruiz', status: 'firmado', date: '2025-08-16' },
  { id: 7, name: 'Presupuesto', sentTo: 'Juan Pérez', status: 'pendiente', date: '2025-08-17' },
  { id: 8, name: 'Memorandum', sentTo: 'María Gómez', status: 'firmado', date: '2025-08-18' },
  { id: 9, name: 'Informe Final', sentTo: 'Carlos López', status: 'pendiente', date: '2025-08-19' },
  { id: 10, name: 'Propuesta', sentTo: 'Ana Ruiz', status: 'firmado', date: '2025-08-20' },
  { id: 11, name: 'Documento Extra', sentTo: 'Juan Pérez', status: 'pendiente', date: '2025-08-21' },
  { id: 12, name: 'Dcumento de Soporte', sentTo: 'Carlos López', status: 'firmado', date: '2025-08-17'},
]);

const filteredReceivedDocs = computed(() => {
  return receivedDocs.value.filter(doc => {
    const matchesSearch = doc.name.toLowerCase().includes(searchReceived.value.toLowerCase());
    const matchesStatus = !filterStatus.value || doc.status === filterStatus.value;
    const matchesDate = !dateFilter.value || doc.date === dateFilter.value;
    return matchesSearch && matchesStatus && matchesDate;
  });
});

const filteredSentDocs = computed(() => {
  return sentDocs.value.filter(doc => {
    const matchesSearch = doc.name.toLowerCase().includes(searchSent.value.toLowerCase());
    const matchesStatus = !filterStatusSent.value || doc.status === filterStatusSent.value;
    const matchesDate = !dateFilterSent.value || doc.date === dateFilterSent.value;
    return matchesSearch && matchesStatus && matchesDate;
  });
});

const paginatedReceivedDocs = computed(() => {
  const start = (currentPageReceived.value - 1) * itemsPerPage;
  const end = start + itemsPerPage;
  return filteredReceivedDocs.value.slice(start, end);
});

const totalPagesReceived = computed(() => {
  return Math.ceil(filteredReceivedDocs.value.length / itemsPerPage);
});

const paginatedSentDocs = computed(() => {
  const start = (currentPageSent.value - 1) * itemsPerPage;
  const end = start + itemsPerPage;
  return filteredSentDocs.value.slice(start, end);
});

const totalPagesSent = computed(() => {
  return Math.ceil(filteredSentDocs.value.length / itemsPerPage);
});

// Métodos de acciones (placeholders)
const openDoc = (doc) => { console.log('Abrir documento', doc); };
const signDoc = (doc) => { 
  doc.status = 'firmado'; 
  console.log('Documento firmado', doc); 
};
const sendDoc = (doc) => {
  showUploadModal.value = true;
  console.log('Preparando para reenviar:', doc.name, 'con estado:', doc.status);
};
const downloadDoc = (doc) => { console.log('Descargar documento', doc); };
const deleteDoc = (doc) => { console.log('Borrar documento', doc); };

const openUploadModal = () => {
  showUploadModal.value = true;
};

const handleUploadSuccess = (data) => {
  console.log('Upload success:', data);
  // Actualizar receivedDocs o sentDocs con el nuevo documento si es necesario
};
</script>


//components/UploadModal.vue
<template>
  <div class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-8 rounded-lg shadow-xl w-full max-w-md">
      <h3 class="text-xl font-semibold mb-4 text-indigo-800">Subir y Enviar PDF</h3>
      <input type="file" @change="handleFileUpload" accept=".pdf" class="mb-4 w-full p-3 border border-gray-300 rounded-lg" />
      <div class="relative mb-4">
        <input v-model="searchUser" @input="updateSuggestions" @focus="handleFocus" @blur="handleBlur" placeholder="Buscar usuario (nombre + apellidos)" class="w-full p-3 border border-gray-300 rounded-lg" />
        <ul v-if="isFocused && suggestedUsers.length" class="absolute bg-white border border-gray-300 rounded-lg mt-1 w-full max-h-40 overflow-y-auto z-10">
          <li v-for="user in suggestedUsers" :key="user.id" @click="selectUser(user)" class="p-3 hover:bg-indigo-50 cursor-pointer">
            {{ user.fullName }} ({{ user.cargo }})
          </li>
        </ul>
      </div>
      <div v-if="uploadSuccess" class="mb-4 flex items-center text-green-600">
        <CheckIcon class="h-5 w-5 mr-2" />
        <span>Documento enviado correctamente</span>
      </div>
      <div class="flex justify-end space-x-4">
        <button @click="$emit('close')" class="bg-gray-300 text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-400">Cancelar</button>
        <button @click="submitPdf" :disabled="!selectedFile || !selectedUser" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 disabled:opacity-50">
          Enviar
        </button>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, watch } from 'vue';
import { CheckIcon } from '@heroicons/vue/24/outline';
import { useMainStore } from '../stores/main'; // Asegúrate de crear este store si no existe

const props = defineProps({
  show: Boolean,
});
const emit = defineEmits(['close', 'upload-success']);

const mainStore = useMainStore();
const searchUser = ref('');
const selectedUser = ref(null);
const selectedFile = ref(null);
const isFocused = ref(false);
const uploadSuccess = ref(false);
const suggestedUsers = ref([]);

const users = ref([
  { id: 1, fullName: 'Juan Pérez', cargo: 'Administrador' },
  { id: 2, fullName: 'María Gómez', cargo: 'Funcionario' },
  { id: 3, fullName: 'Carlos López', cargo: 'Normal' },
]);

const updateSuggestions = () => {
  if (isFocused.value) {
    if (searchUser.value) {
      suggestedUsers.value = users.value.filter(user => user.fullName.toLowerCase().includes(searchUser.value.toLowerCase()));
    } else {
      suggestedUsers.value = users.value;
    }
  }
};

const handleFocus = () => {
  isFocused.value = true;
  updateSuggestions();
};

const handleBlur = () => {
  // Pequeño delay para permitir clics en sugerencias
  setTimeout(() => {
    isFocused.value = false;
  }, 200);
};

const selectUser = (user) => {
  selectedUser.value = user;
  searchUser.value = user.fullName;
  suggestedUsers.value = [];
  isFocused.value = false;
};

const handleFileUpload = (event) => {
  selectedFile.value = event.target.files[0];
};

const submitPdf = () => {
  if (selectedFile.value && selectedUser.value) {
    // Simulación de envío
    console.log('Enviando PDF:', selectedFile.value.name, 'a', selectedUser.value.fullName);
    uploadSuccess.value = true;
    setTimeout(() => {
      uploadSuccess.value = false;
      emit('upload-success', { name: selectedFile.value.name, sentTo: selectedUser.value.fullName, status: 'pendiente' });
      selectedFile.value = null;
      selectedUser.value = null;
      searchUser.value = '';
      emit('close');
    }, 600); // Mostrar check por 2 segundos
  }
};

watch(() => props.show, (newVal) => {
  if (!newVal) {
    selectedFile.value = null;
    selectedUser.value = null;
    searchUser.value = '';
    uploadSuccess.value = false;
  }
});
</script>

//public/firma.png


